## ðŸš€ Governance CI Action Implementation Prompt

This prompt outlines technical requirements for developing a reusable Continuous Integration (CI) action compatible with both GitHub Actions and GitLab CI.

---

### ðŸ“Œ General Technical Requirements

* **Language:** Go (Golang)
* **Executable Format:**  Docker container
* **Compatibility:** Must run seamlessly on both GitHub Actions 
* **Context Detection:** Automatically detect the running environment via environment variables (`GITHUB_ACTIONS`, `GITLAB_CI`)
* **Logging & Reporting:** Clear and actionable logging, standardized across platforms

---

### ðŸ“Œ Recommended Code Architecture

```
my-ci-action/
â”œâ”€â”€ cmd/
â”‚   â””â”€â”€ main.go
â”œâ”€â”€ pkg/
â”‚   â”œâ”€â”€ core/
â”‚   â””â”€â”€ integrations/
â”‚       â”œâ”€â”€ github.go
â”‚       â””â”€â”€ gitlab.go
â”œâ”€â”€ Dockerfile
â”œâ”€â”€ action.yml
â”œâ”€â”€ go.mod
â””â”€â”€ go.sum
```

* **`cmd/`**: Entry-point of your app
* **`pkg/core/`**: Core logic of your action
* **`pkg/integrations/`**: Platform-specific logic, including environment detection and context extraction

---

### ðŸ“Œ GitHub Actions Requirements

* **Definition file:** `action.yml`
* **Execution method:** Docker-based action
* **Dockerfile:** Multi-stage build for optimized size and performance

Example usage:

```yaml
- name: Run Governance check
  uses: tyktechnologies/governance-action@latest
  with:
    governance_service: {GOVERNANCE_SERVICE_URL}
    governance_auth: {GOVERNANCE_SERVICE_TOKEN}
    rule_id: {RULE_ID}
    api_path:   {path to the OAS file}
```

---

### ðŸ“Œ Functions and Context Detection (Go Examples)

#### **Detect CI Platform**

```go
func DetectCI() string {
    switch {
    case os.Getenv("GITHUB_ACTIONS") == "true":
        return "github"
    case os.Getenv("GITLAB_CI") == "true":
        return "gitlab"
    default:
        return "local"
    }
}
```

#### **Extract Context**

```go
func GetContext(ci string) map[string]string {
    switch ci {
    case "github":
        return map[string]string{
            "repository": os.Getenv("GITHUB_REPOSITORY"),
            "commit": os.Getenv("GITHUB_SHA"),
        }
    case "gitlab":
        return map[string]string{
            "repository": os.Getenv("CI_PROJECT_PATH"),
            "commit": os.Getenv("CI_COMMIT_SHA"),
        }
    default:
        return map[string]string{"env": "local"}
    }
}
```

---

### ðŸ“Œ Environment Variables for Context Detection

| Variable         | GitHub Actions        | GitLab CI          |
| ---------------- | --------------------- | ------------------ |
| **CI detection** | `GITHUB_ACTIONS=true` | `GITLAB_CI=true`   |
| **Repository**   | `GITHUB_REPOSITORY`   | `CI_PROJECT_PATH`  |
| **Commit SHA**   | `GITHUB_SHA`          | `CI_COMMIT_SHA`    |
| **Branch Name**  | `GITHUB_REF_NAME`     | `CI_COMMIT_BRANCH` |
| **Actor/User**   | `GITHUB_ACTOR`        | `GITLAB_USER_NAME` |

---

## âœ… Business Requirements

Please clearly outline what this CI action is intended to accomplish from a business perspective below:

* **Goal/Purpose:**
This github action will execute an API call to the governance service with the OAS content of a file in the repo it's running and the rule (rule_id param) given.
That will run a governance analysis over that API.
* **Input Requirements:**
 governance_service: {GOVERNANCE_SERVICE_URL}
    governance_auth: {GOVERNANCE_SERVICE_TOKEN}
    rule_id: {RULE_ID}
    api_path:   {path to the OAS file}

all the fields are required
* **Expected Outputs:**
Example API call response:
[
    {
        "code": "owasp-define-error-responses-401",
        "path": [
            "paths",
            "/",
            "get",
            "responses"
        ],
        "message": "missing response code `401` for `GET`",
        "severity": 1,
        "range": {
            "start": {
                "line": 1,
                "character": 194
            },
            "end": {
                "line": 1,
                "character": 205
            }
        },
        "source": "684acc5b0e08080001e72b3a",
        "api": {
            "id": "684acc5b0e08080001e72b3a",
            "name": "testing-rest-api-2025-05"
        },
        "rule": {
            "name": "owasp-define-error-responses-401"
        }
    },
    {
        "code": "owasp-define-error-responses-429",
        "path": [
            "paths",
            "/",
            "get",
            "responses"
        ],
        "message": "missing response code `429` for `GET`",
        "severity": 1,
        "range": {
            "start": {
                "line": 1,
                "character": 194
            },
            "end": {
                "line": 1,
                "character": 205
            }
        },
        "source": "684acc5b0e08080001e72b3a",
        "api": {
            "id": "684acc5b0e08080001e72b3a",
            "name": "testing-rest-api-2025-05"
        },
        "rule": {
            "name": "owasp-define-error-responses-429"
        }
    },
    {
        "code": "owasp-rate-limit",
        "path": [
            "paths",
            "/",
            "get",
            "responses",
            "200"
        ],
        "message": "response with code `200`, must contain one of the defined headers: `{X-RateLimit-Limit} {X-Rate-Limit-Limit} {RateLimit-Limit, RateLimit-Reset} {RateLimit} `",
        "severity": 0,
        "range": {
            "start": {
                "line": 1,
                "character": 207
            },
            "end": {
                "line": 1,
                "character": 212
            }
        },
        "source": "684acc5b0e08080001e72b3a",
        "api": {
            "id": "684acc5b0e08080001e72b3a",
            "name": "testing-rest-api-2025-05"
        },
        "rule": {
            "name": "owasp-rate-limit"
        }
    },
    {
        "code": "owasp-define-error-responses-500",
        "path": [
            "paths",
            "/",
            "get",
            "responses"
        ],
        "message": "missing response code `500` for `GET`",
        "severity": 1,
        "range": {
            "start": {
                "line": 1,
                "character": 194
            },
            "end": {
                "line": 1,
                "character": 205
            }
        },
        "source": "684acc5b0e08080001e72b3a",
        "api": {
            "id": "684acc5b0e08080001e72b3a",
            "name": "testing-rest-api-2025-05"
        },
        "rule": {
            "name": "owasp-define-error-responses-500"
        }
    },
    {
        "code": "owasp-define-error-validation",
        "path": [
            "paths",
            "/",
            "get",
            "responses"
        ],
        "message": "missing one of `400`, `422`, `4XX` response codes",
        "severity": 1,
        "range": {
            "start": {
                "line": 1,
                "character": 194
            },
            "end": {
                "line": 1,
                "character": 205
            }
        },
        "source": "684acc5b0e08080001e72b3a",
        "api": {
            "id": "684acc5b0e08080001e72b3a",
            "name": "testing-rest-api-2025-05"
        },
        "rule": {
            "name": "owasp-define-error-validation"
        }
    }
]

* **Special Constraints or Conditions:**
You can check the governance service code in ../governance-poc/
---